import unittest
from meu_grafo import *
from bibgrafo.grafo_exceptions import *

class TestGrafo(unittest.TestCase):

    def setUp(self):
        # Grafo da Paraíba
        self.g_p = MeuGrafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p.adicionaAresta('a1', 'J', 'C')
        self.g_p.adicionaAresta('a2', 'C', 'E')
        self.g_p.adicionaAresta('a3', 'C', 'E')
        self.g_p.adicionaAresta('a4', 'P', 'C')
        self.g_p.adicionaAresta('a5', 'P', 'C')
        self.g_p.adicionaAresta('a6', 'M', 'C')
        self.g_p.adicionaAresta('a7', 'T', 'C')
        self.g_p.adicionaAresta('a8', 'M', 'T')
        self.g_p.adicionaAresta('a9', 'T', 'Z')

        # Grafo da Paraíba sem arestas paralelas
        self.g_p_sem_paralelas = MeuGrafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_sem_paralelas.adicionaAresta('a1', 'J', 'C')
        self.g_p_sem_paralelas.adicionaAresta('a2', 'C', 'E')
        self.g_p_sem_paralelas.adicionaAresta('a3', 'P', 'C')
        self.g_p_sem_paralelas.adicionaAresta('a4', 'T', 'C')
        self.g_p_sem_paralelas.adicionaAresta('a5', 'M', 'C')
        self.g_p_sem_paralelas.adicionaAresta('a6', 'M', 'T')
        self.g_p_sem_paralelas.adicionaAresta('a7', 'T', 'Z')

        # Grafos completos
        self.g_c = MeuGrafo(['J', 'C', 'E', 'P'])
        self.g_c.adicionaAresta('a1', 'J', 'C')
        self.g_c.adicionaAresta('a2', 'J', 'E')
        self.g_c.adicionaAresta('a3', 'J', 'P')
        self.g_c.adicionaAresta('a4', 'E', 'C')
        self.g_c.adicionaAresta('a5', 'P', 'C')
        self.g_c.adicionaAresta('a6', 'P', 'E')

        self.g_c2 = MeuGrafo(['Nina', 'Maria'])
        self.g_c2.adicionaAresta('amiga', 'Nina', 'Maria')

        self.g_c3 = MeuGrafo(['J'])

        # Grafos com laco
        self.g_l1 = MeuGrafo(['A', 'B', 'C', 'D'])
        self.g_l1.adicionaAresta('a1', 'A', 'A')
        self.g_l1.adicionaAresta('a2', 'A', 'B')
        self.g_l1.adicionaAresta('a3', 'A', 'A')

        self.g_l2 = MeuGrafo(['A', 'B', 'C', 'D'])
        self.g_l2.adicionaAresta('a1', 'A', 'B')
        self.g_l2.adicionaAresta('a2', 'B', 'B')
        self.g_l2.adicionaAresta('a3', 'B', 'A')

        self.g_l3 = MeuGrafo(['A', 'B', 'C', 'D'])
        self.g_l3.adicionaAresta('a1', 'C', 'A')
        self.g_l3.adicionaAresta('a2', 'C', 'C')
        self.g_l3.adicionaAresta('a3', 'D', 'D')
        self.g_l3.adicionaAresta('a4', 'D', 'D')

        self.g_l4 = MeuGrafo(['D'])
        self.g_l4.adicionaAresta('a1', 'D', 'D')

        self.g_l5 = MeuGrafo(['C', 'D'])
        self.g_l5.adicionaAresta('a1', 'D', 'C')
        self.g_l5.adicionaAresta('a2', 'C', 'C')

        # Grafos desconexos
        self.g_d = MeuGrafo(['A', 'B', 'C', 'D'])
        self.g_d.adicionaAresta('asd', 'A', 'B')

        self.g_d1 = MeuGrafo(['1', '2', '3', '4', '5', '6', '7', '8', '9'])
        self.g_d1.adicionaAresta('a1', '1', '2')
        self.g_d1.adicionaAresta('a2', '1', '5')
        self.g_d1.adicionaAresta('a3', '1', '4')
        self.g_d1.adicionaAresta('a4', '4', '5')
        self.g_d1.adicionaAresta('a5', '2', '3')
        self.g_d1.adicionaAresta('a6', '3', '9')
        self.g_d1.adicionaAresta('a7', '7', '8')
        self.g_d1.adicionaAresta('a8', '6', '7')
        self.g_d1.adicionaAresta('a9', '6', '8')

        self.g_d2 = MeuGrafo(['1', '2', '3', '5', '6', '7'])
        self.g_d2.adicionaAresta('a1', '1', '3')
        self.g_d2.adicionaAresta('a2', '1', '5')
        self.g_d2.adicionaAresta('a3', '5', '7')
        self.g_d2.adicionaAresta('a4', '2', '6')
        self.g_d2.adicionaAresta('a5', '3', '7')

        self.g_d3 = MeuGrafo(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'])
        self.g_d3.adicionaAresta('1', '0', '6')
        self.g_d3.adicionaAresta('2', '0', '2')
        self.g_d3.adicionaAresta('3', '0', '1')
        self.g_d3.adicionaAresta('4', '0', '5')
        self.g_d3.adicionaAresta('5', '3', '4')
        self.g_d3.adicionaAresta('6', '3', '5')
        self.g_d3.adicionaAresta('7', '5', '4')
        self.g_d3.adicionaAresta('8', '4', '6')
        self.g_d3.adicionaAresta('9', '7', '8')
        self.g_d3.adicionaAresta('10', '9', '10')
        self.g_d3.adicionaAresta('11', '9', '12')
        self.g_d3.adicionaAresta('12', '9', '11')
        self.g_d3.adicionaAresta('13', '11', '12')

        self.g_d4 = MeuGrafo(['7', '8', '9', '10', '11', '12'])
        self.g_d4.adicionaAresta('9', '7', '8')
        self.g_d4.adicionaAresta('10', '9', '10')
        self.g_d4.adicionaAresta('11', '9', '12')
        self.g_d4.adicionaAresta('12', '9', '11')
        self.g_d4.adicionaAresta('13', '11', '12')

        self.g_d5 = MeuGrafo(['0', '1', '2', '3', '4', '5', '6', '9', '10', '11', '12'])
        self.g_d5.adicionaAresta('1', '0', '6')
        self.g_d5.adicionaAresta('2', '0', '2')
        self.g_d5.adicionaAresta('3', '0', '1')
        self.g_d5.adicionaAresta('4', '0', '5')
        self.g_d5.adicionaAresta('5', '3', '4')
        self.g_d5.adicionaAresta('6', '3', '5')
        self.g_d5.adicionaAresta('7', '5', '4')
        self.g_d5.adicionaAresta('8', '4', '6')
        self.g_d5.adicionaAresta('10', '9', '10')
        self.g_d5.adicionaAresta('11', '9', '12')
        self.g_d5.adicionaAresta('12', '9', '11')
        self.g_d5.adicionaAresta('13', '11', '12')

        # Árvores
        self.arvore_1 = MeuGrafo(['A', 'B' , 'C', 'D', 'E', 'F', 'G'])
        self.arvore_1.adicionaAresta('1', 'A', 'B')
        self.arvore_1.adicionaAresta('2', 'A', 'E')
        self.arvore_1.adicionaAresta('3', 'A', 'C')
        self.arvore_1.adicionaAresta('4', 'B', 'D')
        self.arvore_1.adicionaAresta('5', 'B', 'F')
        self.arvore_1.adicionaAresta('6', 'C', 'G')

        self.arvore_2 = MeuGrafo(['1', '2', '3', '4', '5', '6'])
        self.arvore_2.adicionaAresta('a1', '5', '6')
        self.arvore_2.adicionaAresta('a2', '5', '4')
        self.arvore_2.adicionaAresta('a3', '4', '3')
        self.arvore_2.adicionaAresta('a4', '4', '2')
        self.arvore_2.adicionaAresta('a5', '4', '1')

        self.arvore_diretorios = MeuGrafo(
            ['ROOT', 'USERS', 'APPLICATIONS', 'VOLUMES', 'KEITH', 'NIGEL', 
            'USB', 'MAC', 'UNIX', 'APPLICATIONS_UNIX', 'CODE', 'DATA', 'DOCS'
            ])

        self.arvore_diretorios.adicionaAresta('a1', 'ROOT', 'USERS')
        self.arvore_diretorios.adicionaAresta('a2', 'ROOT', 'VOLUMES')
        self.arvore_diretorios.adicionaAresta('a3', 'ROOT', 'APPLICATIONS')
        self.arvore_diretorios.adicionaAresta('a4', 'USERS', 'KEITH')
        self.arvore_diretorios.adicionaAresta('a5', 'USERS', 'NIGEL')
        self.arvore_diretorios.adicionaAresta('a6', 'VOLUMES', 'USB')
        self.arvore_diretorios.adicionaAresta('a7', 'VOLUMES', 'MAC')
        self.arvore_diretorios.adicionaAresta('a8', 'USB', 'UNIX')
        self.arvore_diretorios.adicionaAresta('a9', 'UNIX', 'APPLICATIONS_UNIX')
        self.arvore_diretorios.adicionaAresta('a10', 'UNIX', 'CODE')
        self.arvore_diretorios.adicionaAresta('a11', 'UNIX', 'DATA')
        self.arvore_diretorios.adicionaAresta('a12', 'UNIX', 'DOCS')

        # Grafos adicionais:
        self.weird_graph = MeuGrafo(["J", "C", "E", "P", "M"])
        self.weird_graph.adicionaAresta("a", "J", "C")
        self.weird_graph.adicionaAresta("b", "J", "E")
        self.weird_graph.adicionaAresta("c", "J", "J")
        self.weird_graph.adicionaAresta("d", "C", "P")
        self.weird_graph.adicionaAresta("e", "C", "C")
        self.weird_graph.adicionaAresta("f", "E", "M")
        self.weird_graph.adicionaAresta("g", "E", "E")
        self.weird_graph.adicionaAresta("h", "P", "M")
        self.weird_graph.adicionaAresta("i", "P", "P")
        self.weird_graph.adicionaAresta("j", "M", "M")

        self.g_c4 = MeuGrafo(["J", "C", "E", "P", "M"])
        self.g_c4.adicionaAresta("a", "J", "C")
        self.g_c4.adicionaAresta("b", "J", "E")
        self.g_c4.adicionaAresta("c", "J", "P")
        self.g_c4.adicionaAresta("g", "J", "M")
        self.g_c4.adicionaAresta("d", "C", "E")
        self.g_c4.adicionaAresta("e", "C", "P")
        self.g_c4.adicionaAresta("h", "C", "M")
        self.g_c4.adicionaAresta("f", "E", "P")
        self.g_c4.adicionaAresta("i", "E", "M")
        self.g_c4.adicionaAresta("k", "P", "M")

        self.spire_graph = MeuGrafo(['0', '2', '4', '6'])
        self.spire_graph.adicionaAresta('a', '0', '0')
        self.spire_graph.adicionaAresta('b', '0', '2')
        self.spire_graph.adicionaAresta('c', '2', '6')
        self.spire_graph.adicionaAresta('d', '0', '6')
        self.spire_graph.adicionaAresta('e', '6', '2')
        self.spire_graph.adicionaAresta('f', '6', '4')

        self.spire_graph2 = MeuGrafo(['0', '2', '4', '6'])
        self.spire_graph2.adicionaAresta('a', '0', '4')
        self.spire_graph2.adicionaAresta('b', '0', '2')
        self.spire_graph2.adicionaAresta('c', '2', '6')
        self.spire_graph2.adicionaAresta('d', '0', '6')
        self.spire_graph2.adicionaAresta('e', '6', '2')
        self.spire_graph2.adicionaAresta('f', '6', '4')

        self.u = MeuGrafo(["0", "1", "2", "3"])
        self.u.adicionaAresta("A", "0", "1")
        self.u.adicionaAresta("B", "1", "2")
        self.u.adicionaAresta("C", "2", "3")

        self.m1 = MeuGrafo(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'])
        self.m1.adicionaAresta("1", "A", "B")
        self.m1.adicionaAresta("2", "A", "G")
        self.m1.adicionaAresta("3", "A", "J")
        self.m1.adicionaAresta("4", "K", "G")
        self.m1.adicionaAresta("5", "K", "J")
        self.m1.adicionaAresta("6", "J", "G")
        self.m1.adicionaAresta("7", "J", "I")
        self.m1.adicionaAresta("8", "I", "G")
        self.m1.adicionaAresta("9", "G", "H")
        self.m1.adicionaAresta("10", "H", "F")
        self.m1.adicionaAresta("11", "F", "B")
        self.m1.adicionaAresta("12", "B", "G")
        self.m1.adicionaAresta("13", "B", "C")
        self.m1.adicionaAresta("14", "C", "D")
        self.m1.adicionaAresta("15", "D", "E")
        self.m1.adicionaAresta("16", "D", "B")
        self.m1.adicionaAresta("17", "E", "B")

        self.m2 = MeuGrafo(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
        self.m2.adicionaAresta("a1", "1", "2")
        self.m2.adicionaAresta("a3", "2", "3")
        self.m2.adicionaAresta("a4", "2", "3")
        self.m2.adicionaAresta("a2", "2", "4")
        self.m2.adicionaAresta("a5", "2", "4")
        self.m2.adicionaAresta("a6", "2", "6")
        self.m2.adicionaAresta("a7", "2", "5")
        self.m2.adicionaAresta("a8", "5", "6")
        self.m2.adicionaAresta("a9", "6", "8")
        self.m2.adicionaAresta("a10", "6", "7")
        self.m2.adicionaAresta("a11", "7", "8")
        self.m2.adicionaAresta("a12", "8", "9")

        self.m3 = MeuGrafo(['1', '2', '3', '4', '5', '6', '7'])
        self.m3.adicionaAresta('a1', '1', '4')
        self.m3.adicionaAresta('a2', '4', '5')
        self.m3.adicionaAresta('a3', '5', '7')
        self.m3.adicionaAresta('a4', '5', '6')
        self.m3.adicionaAresta('a5', '2', '3')
        self.m3.adicionaAresta('a6', '2', '1')
        self.m3.adicionaAresta('a7', '2', '5')

        self.m4 = MeuGrafo(['A', 'B', 'C', 'D', 'E', 'F', 'G'])
        self.m4.adicionaAresta('a1', 'A', 'B')
        self.m4.adicionaAresta('a2', 'A', 'C')
        self.m4.adicionaAresta('a3', 'A', 'D')
        self.m4.adicionaAresta('a4', 'A', 'F')
        self.m4.adicionaAresta('a5', 'B', 'C')
        self.m4.adicionaAresta('a6', 'B', 'E')
        self.m4.adicionaAresta('a7', 'B', 'G')
        self.m4.adicionaAresta('a8', 'E', 'F')
        self.m4.adicionaAresta('a9', 'F', 'G')

        self.m5 = MeuGrafo([str(i) for i in range(1, 11)])
        self.m5.adicionaAresta('a1', '1', '5')
        self.m5.adicionaAresta('a2', '1', '8')
        self.m5.adicionaAresta('a3', '2', '3')
        self.m5.adicionaAresta('a4', '2', '4')
        self.m5.adicionaAresta('a5', '2', '5')
        self.m5.adicionaAresta('a6', '2', '6')
        self.m5.adicionaAresta('a7', '3', '4')
        self.m5.adicionaAresta('a8', '4', '5')
        self.m5.adicionaAresta('a9', '4', '9')
        self.m5.adicionaAresta('a10', '5', '9')
        self.m5.adicionaAresta('a11', '5', '6')
        self.m5.adicionaAresta('a12', '5', '8')
        self.m5.adicionaAresta('a13', '6', '9')
        self.m5.adicionaAresta('a14', '6', '7')
        self.m5.adicionaAresta('a15', '7', '10')
        self.m5.adicionaAresta('a16', '9', '10')

        self.m6 = MeuGrafo(["A", "B", "C", "D", "E", "F", "G"])
        self.m6.adicionaAresta('1', 'A', 'B')
        self.m6.adicionaAresta('2', 'A', 'F')
        self.m6.adicionaAresta('3', 'F', 'E')
        self.m6.adicionaAresta('4', 'F', 'G')
        self.m6.adicionaAresta('5', 'B', 'G')
        self.m6.adicionaAresta('6', 'B', 'C')
        self.m6.adicionaAresta('7', 'G', 'C')
        self.m6.adicionaAresta('8', 'G', 'E')
        self.m6.adicionaAresta('9', 'C', 'E')
        self.m6.adicionaAresta('10', 'E', 'D')
        self.m6.adicionaAresta('11', 'C', 'D')
        self.m6.adicionaAresta('12', 'B', 'F')

        self.alcano = MeuGrafo(['C0', 'C1', 'C2', 'C3', 'C4'])
        self.alcano.adicionaAresta('a', 'C0', 'C1')
        self.alcano.adicionaAresta('b', 'C2', 'C0')
        self.alcano.adicionaAresta('c', 'C3', 'C0')
        self.alcano.adicionaAresta('d', 'C0', 'C4')

        self.composto_1 = MeuGrafo([
            'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14',
            'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'H10', 'H11', 'H12', 'H13', 'H14', 'H15', 'H16', 'H17',
            'O1', 'O2', 'O3', 'O4', 'O5',
            'N1', 'N2'])
        self.composto_1.adicionaAresta('a0', 'H2', 'C1')
        self.composto_1.adicionaAresta('a1', 'C2', 'O5')
        self.composto_1.adicionaAresta('a2', 'C2', 'O5')
        self.composto_1.adicionaAresta('a3', 'H5', 'C7')
        self.composto_1.adicionaAresta('a4', 'H7', 'C11')
        self.composto_1.adicionaAresta('a5', 'C12', 'H15')
        self.composto_1.adicionaAresta('a6', 'C1', 'H3')
        self.composto_1.adicionaAresta('a7', 'C3', 'N1')
        self.composto_1.adicionaAresta('a8', 'C10', 'H8')
        self.composto_1.adicionaAresta('a9', 'C13', 'H12')
        self.composto_1.adicionaAresta('a10', 'C7', 'C3')
        self.composto_1.adicionaAresta('a11', 'C9', 'C10')
        self.composto_1.adicionaAresta('a12', 'C10', 'C9')
        self.composto_1.adicionaAresta('a13', 'C14', 'C13')
        self.composto_1.adicionaAresta('a14', 'C11', 'C9')
        self.composto_1.adicionaAresta('a15', 'C11', 'C12')
        self.composto_1.adicionaAresta('a16', 'C11', 'C12')
        self.composto_1.adicionaAresta('a17', 'C12', 'C14')
        self.composto_1.adicionaAresta('a18', 'C14', 'C13')
        self.composto_1.adicionaAresta('a19', 'C7', 'C9')
        self.composto_1.adicionaAresta('a20', 'C3', 'H6')
        self.composto_1.adicionaAresta('a21', 'C2', 'C3')
        self.composto_1.adicionaAresta('a22', 'O1', 'C2')
        self.composto_1.adicionaAresta('a23', 'N1', 'C8')
        self.composto_1.adicionaAresta('a24', 'C1', 'O1')
        self.composto_1.adicionaAresta('a25', 'C14', 'H16')
        self.composto_1.adicionaAresta('a26', 'C10', 'C13')
        self.composto_1.adicionaAresta('a27', 'C8', 'C6')
        self.composto_1.adicionaAresta('a28', 'C8', 'O2')
        self.composto_1.adicionaAresta('a29', 'C6', 'C5')
        self.composto_1.adicionaAresta('a30', 'N2', 'H11')
        self.composto_1.adicionaAresta('a31', 'C5', 'C4')
        self.composto_1.adicionaAresta('a32', 'C8', 'O2')
        self.composto_1.adicionaAresta('a33', 'C6', 'H10')
        self.composto_1.adicionaAresta('a34', 'H14', 'C5')
        self.composto_1.adicionaAresta('a35', 'C4', 'O3')
        self.composto_1.adicionaAresta('a36', 'C6', 'N2')
        self.composto_1.adicionaAresta('a37', 'C5', 'H17')
        self.composto_1.adicionaAresta('a38', 'C4', 'O4')
        self.composto_1.adicionaAresta('a39', 'O4', 'H13')
        self.composto_1.adicionaAresta('a40', 'C4', 'O3')
        self.composto_1.adicionaAresta('a41', 'C7', 'H4')
        self.composto_1.adicionaAresta('a42', 'C1', 'H1')
        self.composto_1.adicionaAresta('a43', 'H9', 'N2')

        self.composto_2 = MeuGrafo([
            'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9',
            'C1', 'C2', 'C3', 'C4',
            'O1',
            'N1'])
        self.composto_2.adicionaAresta('a', 'C1', 'H1')
        self.composto_2.adicionaAresta('b', 'C1', 'C2')
        self.composto_2.adicionaAresta('c', 'C2', 'C3')
        self.composto_2.adicionaAresta('d', 'C3', 'C4')
        self.composto_2.adicionaAresta('e', 'C4', 'O1')
        self.composto_2.adicionaAresta('f', 'C4', 'N1')
        self.composto_2.adicionaAresta('g', 'N1', 'H8')
        self.composto_2.adicionaAresta('h', 'N1', 'H9')
        self.composto_2.adicionaAresta('i', 'C4', 'O1')
        self.composto_2.adicionaAresta('j', 'C3', 'H7')
        self.composto_2.adicionaAresta('k', 'C3', 'H6')
        self.composto_2.adicionaAresta('l', 'C2', 'H4')
        self.composto_2.adicionaAresta('m', 'C2', 'H5')
        self.composto_2.adicionaAresta('o', 'C1', 'H3')
        self.composto_2.adicionaAresta('p', 'C1', 'H2')
        
        self.social_media = MeuGrafo([
            'KAUE', 'VITTOR', 'DH', 'CAIO', 'MATHEUS', 'JV', 'VINI', 'YAN', 'JAMYLE', 'CICERO', 'REBECA', 'LUANA', 'LUCAS', 'ANA', 
            'ELYZA', 'RADIJA', 'RAISSA', 'VANESSA', 'INGRID', 'LUIS', 'DUDA', 'ITALLO', 'LUIZA', 'MARQUES', 'JOAO', 'YURI', 'LOGAN', 
            'GIO', 'PEDRO', 'ANTHONY', 'JOSE', 'KAUA', 'NANI', 'RIAN', 'JULIO'])
        self.social_media.adicionaAresta('a1', 'JOSE', 'KAUA')
        self.social_media.adicionaAresta('a2', 'KAUA', 'NANI')
        self.social_media.adicionaAresta('a3', 'JOSE', 'KAUE')
        self.social_media.adicionaAresta('a4', 'KAUE', 'KAUA')
        self.social_media.adicionaAresta('a5', 'KAUE', 'NANI')
        self.social_media.adicionaAresta('a6', 'GIO', 'RIAN')
        self.social_media.adicionaAresta('a7', 'ANTHONY', 'JULIO')
        self.social_media.adicionaAresta('a8', 'ITALLO', 'KAUE')
        self.social_media.adicionaAresta('a9', 'KAUE', 'PEDRO')
        self.social_media.adicionaAresta('a10', 'LUIZA', 'GIO')
        self.social_media.adicionaAresta('a11', 'MARQUES', 'GIO')
        self.social_media.adicionaAresta('a12', 'JOAO', 'ANTHONY')
        self.social_media.adicionaAresta('a13', 'YURI', 'ANTHONY')
        self.social_media.adicionaAresta('a14', 'ITALLO', 'LUIZA')
        self.social_media.adicionaAresta('a15', 'LUIZA', 'MARQUES')
        self.social_media.adicionaAresta('a16', 'MARQUES', 'JOAO')
        self.social_media.adicionaAresta('a17', 'JOAO', 'YURI')
        self.social_media.adicionaAresta('a18', 'DUDA', 'INGRID')
        self.social_media.adicionaAresta('a19', 'ITALLO', 'LUIS')
        self.social_media.adicionaAresta('a20', 'LUIS', 'LUIZA')
        self.social_media.adicionaAresta('a21', 'VANESSA', 'INGRID')
        self.social_media.adicionaAresta('a22', 'INGRID', 'LUIS')
        self.social_media.adicionaAresta('a23', 'RAISSA', 'INGRID')
        self.social_media.adicionaAresta('a24', 'LUCAS', 'LUIS')
        self.social_media.adicionaAresta('a25', 'ANA', 'LUIS')
        self.social_media.adicionaAresta('a26', 'LUANA', 'LUCAS')
        self.social_media.adicionaAresta('a27', 'ANA', 'ELYZA')
        self.social_media.adicionaAresta('a28', 'ELYZA', 'RADIJA')
        self.social_media.adicionaAresta('a29', 'CICERO', 'RADIJA')
        self.social_media.adicionaAresta('a30', 'JV', 'LUCAS')
        self.social_media.adicionaAresta('a31', 'VINI', 'LUCAS')
        self.social_media.adicionaAresta('a32', 'ANA', 'JAMYLE')
        self.social_media.adicionaAresta('a33', 'JV', 'VINI')
        self.social_media.adicionaAresta('a34', 'YAN', 'JAMYLE')
        self.social_media.adicionaAresta('a35', 'JAMYLE', 'CICERO')
        self.social_media.adicionaAresta('a36', 'CICERO', 'REBECA')
        self.social_media.adicionaAresta('a37', 'DH', 'VINI')
        self.social_media.adicionaAresta('a38', 'VITTOR', 'YAN')
        self.social_media.adicionaAresta('a39', 'YAN', 'CAIO')
        self.social_media.adicionaAresta('a40', 'CAIO', 'JAMYLE')
        self.social_media.adicionaAresta('a41', 'REBECA', 'MATHEUS')
        self.social_media.adicionaAresta('a42', 'VITTOR', 'LOGAN')

        self.abc = MeuGrafo(["A", "B", "C"])
        self.abc.adicionaAresta("a1", "A", "B")
        self.abc.adicionaAresta("a2", "B", "C")
        self.abc.adicionaAresta("a3", "C", "A")

        # Resultados da DFS dos grafos
        self.g_p_j_dfs = MeuGrafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_j_dfs.adicionaAresta('a1', 'J', 'C')
        self.g_p_j_dfs.adicionaAresta('a2', 'C', 'E')
        self.g_p_j_dfs.adicionaAresta('a4', 'C', 'P')
        self.g_p_j_dfs.adicionaAresta('a6', 'C', 'M')
        self.g_p_j_dfs.adicionaAresta('a8', 'M', 'T')
        self.g_p_j_dfs.adicionaAresta('a9', 'T', 'Z')

        self.g_p_c_dfs = MeuGrafo(['C', 'J', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_c_dfs.adicionaAresta('a1', 'C', 'J')
        self.g_p_c_dfs.adicionaAresta('a2', 'C', 'E')
        self.g_p_c_dfs.adicionaAresta('a4', 'C', 'P')
        self.g_p_c_dfs.adicionaAresta('a6', 'C', 'M')
        self.g_p_c_dfs.adicionaAresta('a8', 'M', 'T')
        self.g_p_c_dfs.adicionaAresta('a9', 'T', 'Z')

        self.g_p_p_dfs = MeuGrafo(['P', 'C', 'J', 'E', 'M', 'T', 'Z'])
        self.g_p_p_dfs.adicionaAresta('a4', 'P', 'C')
        self.g_p_p_dfs.adicionaAresta('a1', 'C', 'J')
        self.g_p_p_dfs.adicionaAresta('a2', 'C', 'E')
        self.g_p_p_dfs.adicionaAresta('a6', 'C', 'M')
        self.g_p_p_dfs.adicionaAresta('a8', 'M', 'T')
        self.g_p_p_dfs.adicionaAresta('a9', 'T', 'Z')

        self.m1_k_dfs = MeuGrafo(['K', 'G', 'A', 'B', 'F', 'H', 'C', 'D', 'E', 'J', 'I'])
        self.m1_k_dfs.adicionaAresta("4", "K", "G")
        self.m1_k_dfs.adicionaAresta("2", "G", "A")
        self.m1_k_dfs.adicionaAresta("1", "A", "B")
        self.m1_k_dfs.adicionaAresta("11", "B", "F")
        self.m1_k_dfs.adicionaAresta("10", "F", "H")
        self.m1_k_dfs.adicionaAresta("13", "B", "C")
        self.m1_k_dfs.adicionaAresta("14", "C", "D")
        self.m1_k_dfs.adicionaAresta("15", "D", "E")
        self.m1_k_dfs.adicionaAresta("3", "A", "J")
        self.m1_k_dfs.adicionaAresta("7", "J", "I")

        self.m1_d_dfs = MeuGrafo(['D', 'C', 'B', 'A', 'G', 'K', 'J', 'I', 'H', 'F', 'E'])
        self.m1_d_dfs.adicionaAresta("14", "D", "C")
        self.m1_d_dfs.adicionaAresta("13", "C", "B")
        self.m1_d_dfs.adicionaAresta("1", "B", "A")
        self.m1_d_dfs.adicionaAresta("2", "A", "G")
        self.m1_d_dfs.adicionaAresta("4", "G", "K")
        self.m1_d_dfs.adicionaAresta("5", "K", "J")
        self.m1_d_dfs.adicionaAresta("7", "J", "I")
        self.m1_d_dfs.adicionaAresta("9", "G", "H")
        self.m1_d_dfs.adicionaAresta("10", "H", "F")
        self.m1_d_dfs.adicionaAresta("17", "B", "E")
        
        self.alcano_c0_dfs = MeuGrafo(['C0', 'C1', 'C2', 'C3', 'C4'])
        self.alcano_c0_dfs.adicionaAresta('a', 'C0', 'C1')
        self.alcano_c0_dfs.adicionaAresta('b', 'C0', 'C2')
        self.alcano_c0_dfs.adicionaAresta('c', 'C0', 'C3')
        self.alcano_c0_dfs.adicionaAresta('d', 'C0', 'C4')

        self.u_1_dfs = MeuGrafo(["1", "0", "2", "3"])
        self.u_1_dfs.adicionaAresta("A", "1", "0")
        self.u_1_dfs.adicionaAresta("B", "1", "2")
        self.u_1_dfs.adicionaAresta("C", "2", "3")

        self.g_c3_none_dfs = MeuGrafo(['J'])

        self.g_c_j_dfs = MeuGrafo(['J', 'C', 'E', 'P'])
        self.g_c_j_dfs.adicionaAresta('a1', 'J', 'C')
        self.g_c_j_dfs.adicionaAresta('a4', 'C', 'E')
        self.g_c_j_dfs.adicionaAresta('a6', 'E', 'P')

        self.spire_graph2_6_dfs = MeuGrafo(["6", "2", "0", "4"])
        self.spire_graph2_6_dfs.adicionaAresta('c', '6', '2')
        self.spire_graph2_6_dfs.adicionaAresta('b', '2', '0')
        self.spire_graph2_6_dfs.adicionaAresta('a', '0', '4')

        self.social_media_dh_dfs = MeuGrafo([
            "DH", "VINI", "LUCAS", "LUIS", "ITALLO", "KAUE", "JOSE", "KAUA", "NANI", "PEDRO", "LUIZA", "GIO", "RIAN", 
            "MARQUES", "JOAO", "ANTHONY", "JULIO", "YURI", "INGRID", "DUDA", "VANESSA", "RAISSA", "ANA", "ELYZA", 
            "RADIJA", "CICERO", "JAMYLE", "YAN", "VITTOR", "LOGAN", "CAIO", "REBECA", "MATHEUS", "LUANA", "JV"])
        self.social_media_dh_dfs.adicionaAresta('a37', 'DH', 'VINI')
        self.social_media_dh_dfs.adicionaAresta('a31', 'VINI', 'LUCAS')
        self.social_media_dh_dfs.adicionaAresta('a24', 'LUCAS', 'LUIS')
        self.social_media_dh_dfs.adicionaAresta('a19', 'LUIS', 'ITALLO')
        self.social_media_dh_dfs.adicionaAresta('a8', 'ITALLO', 'KAUE')
        self.social_media_dh_dfs.adicionaAresta('a3', 'KAUE', 'JOSE')
        self.social_media_dh_dfs.adicionaAresta('a1', 'JOSE', 'KAUA')
        self.social_media_dh_dfs.adicionaAresta('a2', 'KAUA', 'NANI')
        self.social_media_dh_dfs.adicionaAresta('a9', 'KAUE', 'PEDRO')
        self.social_media_dh_dfs.adicionaAresta('a14', 'ITALLO', 'LUIZA')
        self.social_media_dh_dfs.adicionaAresta('a10', 'LUIZA', 'GIO')
        self.social_media_dh_dfs.adicionaAresta('a6', 'GIO', 'RIAN')
        self.social_media_dh_dfs.adicionaAresta('a11', 'GIO', 'MARQUES')
        self.social_media_dh_dfs.adicionaAresta('a16', 'MARQUES', 'JOAO')
        self.social_media_dh_dfs.adicionaAresta('a12', 'JOAO', 'ANTHONY')
        self.social_media_dh_dfs.adicionaAresta('a7', 'ANTHONY', 'JULIO')
        self.social_media_dh_dfs.adicionaAresta('a13', 'ANTHONY', 'YURI')
        self.social_media_dh_dfs.adicionaAresta('a22', 'LUIS', 'INGRID')
        self.social_media_dh_dfs.adicionaAresta('a18', 'INGRID', 'DUDA')
        self.social_media_dh_dfs.adicionaAresta('a21', 'INGRID', 'VANESSA')
        self.social_media_dh_dfs.adicionaAresta('a23', 'INGRID', 'RAISSA')
        self.social_media_dh_dfs.adicionaAresta('a25', 'LUIS', 'ANA')
        self.social_media_dh_dfs.adicionaAresta("a27", 'ANA', 'ELYZA')
        self.social_media_dh_dfs.adicionaAresta('a28', 'ELYZA', 'RADIJA')
        self.social_media_dh_dfs.adicionaAresta('a29', 'RADIJA', 'CICERO')
        self.social_media_dh_dfs.adicionaAresta('a35', 'CICERO', 'JAMYLE')
        self.social_media_dh_dfs.adicionaAresta('a34', 'JAMYLE', 'YAN')
        self.social_media_dh_dfs.adicionaAresta('a38', 'YAN', 'VITTOR')
        self.social_media_dh_dfs.adicionaAresta('a42', 'VITTOR', 'LOGAN')
        self.social_media_dh_dfs.adicionaAresta('a39', 'YAN', 'CAIO')
        self.social_media_dh_dfs.adicionaAresta('a36', 'CICERO', 'REBECA')
        self.social_media_dh_dfs.adicionaAresta('a41', 'REBECA', 'MATHEUS')
        self.social_media_dh_dfs.adicionaAresta('a26', 'LUCAS', 'LUANA')
        self.social_media_dh_dfs.adicionaAresta('a30', 'LUCAS', 'JV')

        self.social_media_jamyle_dfs = MeuGrafo([
            'JAMYLE', 'ANA', 'LUIS', 'ITALLO', 'KAUE', 'JOSE', 'KAUA', 'NANI', 'PEDRO', 'LUIZA', 'GIO', 'RIAN', 'MARQUES', 'JOAO', 
            'ANTHONY', 'JULIO', 'YURI', 'INGRID', 'DUDA', 'VANESSA', 'RAISSA', 'LUCAS', 'LUANA', 'JV', 'VINI', 'DH', 'ELYZA', 'RADIJA', 
            'CICERO', 'REBECA', 'MATHEUS', 'YAN', 'VITTOR', 'LOGAN', 'CAIO' 
        ])
        self.social_media_jamyle_dfs.adicionaAresta('a32', 'JAMYLE', 'ANA')
        self.social_media_jamyle_dfs.adicionaAresta('a25', 'ANA', 'LUIS')
        self.social_media_jamyle_dfs.adicionaAresta('a19', 'LUIS', 'ITALLO')
        self.social_media_jamyle_dfs.adicionaAresta('a8', 'ITALLO', 'KAUE')
        self.social_media_jamyle_dfs.adicionaAresta('a3', 'KAUE', 'JOSE')
        self.social_media_jamyle_dfs.adicionaAresta('a1', 'JOSE', 'KAUA')
        self.social_media_jamyle_dfs.adicionaAresta('a2', 'KAUA', 'NANI')
        self.social_media_jamyle_dfs.adicionaAresta('a9', 'KAUE', 'PEDRO')
        self.social_media_jamyle_dfs.adicionaAresta('a14', 'ITALLO', 'LUIZA')
        self.social_media_jamyle_dfs.adicionaAresta('a10', 'LUIZA', 'GIO')
        self.social_media_jamyle_dfs.adicionaAresta('a6', 'GIO', 'RIAN')
        self.social_media_jamyle_dfs.adicionaAresta('a11', 'GIO', 'MARQUES')
        self.social_media_jamyle_dfs.adicionaAresta('a16', 'MARQUES', 'JOAO')
        self.social_media_jamyle_dfs.adicionaAresta('a12', 'JOAO', 'ANTHONY')
        self.social_media_jamyle_dfs.adicionaAresta('a7', 'ANTHONY', 'JULIO')
        self.social_media_jamyle_dfs.adicionaAresta('a13', 'ANTHONY', 'YURI')
        self.social_media_jamyle_dfs.adicionaAresta('a22','LUIS', 'INGRID')
        self.social_media_jamyle_dfs.adicionaAresta('a18','INGRID', 'DUDA')
        self.social_media_jamyle_dfs.adicionaAresta('a21','INGRID', 'VANESSA')
        self.social_media_jamyle_dfs.adicionaAresta('a23', 'INGRID', 'RAISSA')
        self.social_media_jamyle_dfs.adicionaAresta('a24', 'LUIS', 'LUCAS')
        self.social_media_jamyle_dfs.adicionaAresta('a26', 'LUCAS', 'LUANA')
        self.social_media_jamyle_dfs.adicionaAresta('a30', 'LUCAS', 'JV')
        self.social_media_jamyle_dfs.adicionaAresta('a33', 'JV', 'VINI')
        self.social_media_jamyle_dfs.adicionaAresta('a37', 'VINI', 'DH')
        self.social_media_jamyle_dfs.adicionaAresta('a27', 'ANA', 'ELYZA')
        self.social_media_jamyle_dfs.adicionaAresta('a28', 'ELYZA', 'RADIJA')
        self.social_media_jamyle_dfs.adicionaAresta('a29', 'RADIJA', 'CICERO')
        self.social_media_jamyle_dfs.adicionaAresta('a36', 'CICERO', 'REBECA')
        self.social_media_jamyle_dfs.adicionaAresta('a41', 'REBECA', 'MATHEUS')
        self.social_media_jamyle_dfs.adicionaAresta('a34', 'JAMYLE', 'YAN')
        self.social_media_jamyle_dfs.adicionaAresta('a38', 'YAN', 'VITTOR')
        self.social_media_jamyle_dfs.adicionaAresta('a42', 'VITTOR', 'LOGAN')
        self.social_media_jamyle_dfs.adicionaAresta('a39', 'YAN', 'CAIO')

        self.composto_1_c8_dfs = MeuGrafo([
            "C8", 'N1', 'C3', 'C7', 'H5', 'C9', 'C10', 'H8', 'C13', 'H12', 'C14', 'C12', 'H15', 'C11', 'H7', 'H16', 
            'H4', 'H6', 'C2', 'O5', 'O1', 'C1', 'H2', 'H3', 'H1', 'C6', 'C5', 'C4', 'O3', 'O4', 'H13', 'H14', 'H17', 
            'H10', 'N2', 'H11', 'H9', 'O2' ])
        self.composto_1_c8_dfs.adicionaAresta('a23', 'C8','N1')
        self.composto_1_c8_dfs.adicionaAresta('a7', 'N1', 'C3')
        self.composto_1_c8_dfs.adicionaAresta('a10', 'C3', 'C7')
        self.composto_1_c8_dfs.adicionaAresta('a3', 'C7', 'H5')
        self.composto_1_c8_dfs.adicionaAresta('a19', 'C7', 'C9')
        self.composto_1_c8_dfs.adicionaAresta('a11', 'C9', 'C10')
        self.composto_1_c8_dfs.adicionaAresta('a8', 'C10', 'H8')
        self.composto_1_c8_dfs.adicionaAresta('a26', 'C10', 'C13')
        self.composto_1_c8_dfs.adicionaAresta('a9', 'C13', 'H12')
        self.composto_1_c8_dfs.adicionaAresta('a13', 'C13', 'C14')
        self.composto_1_c8_dfs.adicionaAresta('a17', 'C14', 'C12')
        self.composto_1_c8_dfs.adicionaAresta('a5', 'C12', 'H15')
        self.composto_1_c8_dfs.adicionaAresta('a15', 'C12', 'C11')
        self.composto_1_c8_dfs.adicionaAresta('a4', 'C11', 'H7')
        self.composto_1_c8_dfs.adicionaAresta('a25', 'C14', 'H16')
        self.composto_1_c8_dfs.adicionaAresta('a41', 'C7', 'H4')
        self.composto_1_c8_dfs.adicionaAresta('a20', 'C3', 'H6')
        self.composto_1_c8_dfs.adicionaAresta('a21', 'C3', 'C2')
        self.composto_1_c8_dfs.adicionaAresta('a1', 'C2', 'O5')
        self.composto_1_c8_dfs.adicionaAresta('a22', 'C2', 'O1')
        self.composto_1_c8_dfs.adicionaAresta('a24', 'O1','C1')
        self.composto_1_c8_dfs.adicionaAresta('a0', 'C1', 'H2')
        self.composto_1_c8_dfs.adicionaAresta('a6', 'C1', 'H3')
        self.composto_1_c8_dfs.adicionaAresta('a42', 'C1', 'H1')
        self.composto_1_c8_dfs.adicionaAresta('a27', 'C8', 'C6')
        self.composto_1_c8_dfs.adicionaAresta('a29', 'C6', 'C5')
        self.composto_1_c8_dfs.adicionaAresta('a31', 'C5', 'C4')
        self.composto_1_c8_dfs.adicionaAresta('a35', 'C4', 'O3')
        self.composto_1_c8_dfs.adicionaAresta('a38', 'C4', 'O4')
        self.composto_1_c8_dfs.adicionaAresta('a39', 'O4', 'H13')
        self.composto_1_c8_dfs.adicionaAresta('a34', 'C5', 'H14')
        self.composto_1_c8_dfs.adicionaAresta('a37', 'C5', 'H17')
        self.composto_1_c8_dfs.adicionaAresta('a33', 'C6', 'H10')
        self.composto_1_c8_dfs.adicionaAresta('a36', 'C6', 'N2')
        self.composto_1_c8_dfs.adicionaAresta('a30', 'N2', 'H11')
        self.composto_1_c8_dfs.adicionaAresta('a43', 'N2', 'H9')
        self.composto_1_c8_dfs.adicionaAresta('a28', 'C8', 'O2')

        self.composto_2__h4_dfs = MeuGrafo(['H4', 'C2', 'C1', 'H1', 'H3', 'H2', 'C3', 'C4', 'O1', 'N1', 'H8', 'H9', 'H7', 'H6', 'H5'])
        self.composto_2__h4_dfs.adicionaAresta('l', 'H4', 'C2')
        self.composto_2__h4_dfs.adicionaAresta('b', 'C2', 'C1')
        self.composto_2__h4_dfs.adicionaAresta('a', 'C1', 'H1')
        self.composto_2__h4_dfs.adicionaAresta('o', 'C1', 'H3')
        self.composto_2__h4_dfs.adicionaAresta('p', 'C1', 'H2')
        self.composto_2__h4_dfs.adicionaAresta('c', 'C2', 'C3')
        self.composto_2__h4_dfs.adicionaAresta('d', 'C3', 'C4')
        self.composto_2__h4_dfs.adicionaAresta('e', 'C4', 'O1')
        self.composto_2__h4_dfs.adicionaAresta('f', 'C4', 'N1')
        self.composto_2__h4_dfs.adicionaAresta('g', 'N1', 'H8')
        self.composto_2__h4_dfs.adicionaAresta('h', 'N1', 'H9')
        self.composto_2__h4_dfs.adicionaAresta('j', 'C3', 'H7')
        self.composto_2__h4_dfs.adicionaAresta('k', 'C3', 'H6')
        self.composto_2__h4_dfs.adicionaAresta('m', 'C2', 'H5')
        
        # Resultado da BFS dos grafos
        self.g_p_j_bfs = MeuGrafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_j_bfs.adicionaAresta('a1', 'J', 'C')
        self.g_p_j_bfs.adicionaAresta('a2', 'C', 'E')
        self.g_p_j_bfs.adicionaAresta('a4', 'C', 'P')
        self.g_p_j_bfs.adicionaAresta('a6', 'C', 'M')
        self.g_p_j_bfs.adicionaAresta('a7', 'C', 'T')
        self.g_p_j_bfs.adicionaAresta('a9', 'T', 'Z')

        self.g_p_c_bfs = MeuGrafo(['C', 'J', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_c_bfs.adicionaAresta('a1', 'C', 'J')
        self.g_p_c_bfs.adicionaAresta('a2', 'C', 'E')
        self.g_p_c_bfs.adicionaAresta('a4', 'C', 'P')
        self.g_p_c_bfs.adicionaAresta('a6', 'C', 'M')
        self.g_p_c_bfs.adicionaAresta('a7', 'C', 'T')
        self.g_p_c_bfs.adicionaAresta('a9', 'T', 'Z')

        self.g_p_p_bfs = MeuGrafo(['P', 'C', 'J', 'E', 'M', 'T', 'Z'])
        self.g_p_p_bfs.adicionaAresta('a4', 'P', 'C')
        self.g_p_p_bfs.adicionaAresta('a1', 'C', 'J')
        self.g_p_p_bfs.adicionaAresta('a2', 'C', 'E')
        self.g_p_p_bfs.adicionaAresta('a6', 'C', 'M')
        self.g_p_p_bfs.adicionaAresta('a7', 'C', 'T')
        self.g_p_p_bfs.adicionaAresta('a9', 'T', 'Z')

        self.alcano_c0_bfs = MeuGrafo(['C0', 'C1', 'C2', 'C3', 'C4'])
        self.alcano_c0_bfs.adicionaAresta('a', 'C0', 'C1')
        self.alcano_c0_bfs.adicionaAresta('b', 'C0', 'C2')
        self.alcano_c0_bfs.adicionaAresta('c', 'C0', 'C3')
        self.alcano_c0_bfs.adicionaAresta('d', 'C0', 'C4')

        self.u_1_bfs = MeuGrafo(["1", "0", "2", "3"])
        self.u_1_bfs.adicionaAresta("A", "1", "0")
        self.u_1_bfs.adicionaAresta("B", "1", "2")
        self.u_1_bfs.adicionaAresta("C", "2", "3")

        self.g_c3_none_bfs = MeuGrafo(['J'])

        self.g_c_j_bfs = MeuGrafo(['J', 'C', 'P', 'E'])
        self.g_c_j_bfs.adicionaAresta('a1', 'J', 'C')
        self.g_c_j_bfs.adicionaAresta('a2', 'J', 'E')
        self.g_c_j_bfs.adicionaAresta('a3', 'J', 'P')

        self.spire_graph2_6_bfs = MeuGrafo(["6", "2", "0", "4"])
        self.spire_graph2_6_bfs.adicionaAresta('c', '6', '2')
        self.spire_graph2_6_bfs.adicionaAresta('d', '6', '0')
        self.spire_graph2_6_bfs.adicionaAresta('f', '6', '4')

        self.composto_1_c8_bfs = MeuGrafo([
            'C8', 'N1', 'C6', 'O2', 'C3', 'C5', 'H10', 'N2', 'C7', 'H6', 'C2', 'C4', 'H14', 'H17', 'H11', 'H9', 'H5', 'C9', 
            'H4', 'O5', 'O1', 'O3', 'O4', 'C10', 'C11', 'C1', 'H13', 'H8', 'C13', 'H7', 'C12', 'H2', 'H3', 'H1', 'H12', 'C14', 'H15', 'H16' 
        ])
        self.composto_1_c8_bfs.adicionaAresta('a23', 'C8', 'N1')
        self.composto_1_c8_bfs.adicionaAresta('a27', 'C8', 'C6')
        self.composto_1_c8_bfs.adicionaAresta('a28', 'C8', 'O2')
        self.composto_1_c8_bfs.adicionaAresta('a7', 'N1', 'C3')
        self.composto_1_c8_bfs.adicionaAresta('a29', 'C6', 'C5')
        self.composto_1_c8_bfs.adicionaAresta('a33', 'C6', 'H10')
        self.composto_1_c8_bfs.adicionaAresta('a36', 'C6', 'N2')
        self.composto_1_c8_bfs.adicionaAresta('a10', 'C3', 'C7')
        self.composto_1_c8_bfs.adicionaAresta('a20', 'C3', 'H6')
        self.composto_1_c8_bfs.adicionaAresta('a21', 'C3', 'C2')
        self.composto_1_c8_bfs.adicionaAresta('a31', 'C5', 'C4')
        self.composto_1_c8_bfs.adicionaAresta('a34', 'C5', 'H14')
        self.composto_1_c8_bfs.adicionaAresta('a37', 'C5', 'H17')
        self.composto_1_c8_bfs.adicionaAresta('a30', 'N2', 'H11')
        self.composto_1_c8_bfs.adicionaAresta('a43', 'N2', 'H9')
        self.composto_1_c8_bfs.adicionaAresta('a3', 'C7', 'H5')
        self.composto_1_c8_bfs.adicionaAresta('a19', 'C7', 'C9')
        self.composto_1_c8_bfs.adicionaAresta('a41', 'C7', 'H4')
        self.composto_1_c8_bfs.adicionaAresta('a1', 'C2', 'O5')
        self.composto_1_c8_bfs.adicionaAresta('a22', 'C2', 'O1')
        self.composto_1_c8_bfs.adicionaAresta('a35', 'C4', 'O3')
        self.composto_1_c8_bfs.adicionaAresta('a38', 'C4', 'O4')
        self.composto_1_c8_bfs.adicionaAresta('a11', 'C9', 'C10')
        self.composto_1_c8_bfs.adicionaAresta('a14', 'C9', 'C11')
        self.composto_1_c8_bfs.adicionaAresta('a24', 'O1', 'C1')
        self.composto_1_c8_bfs.adicionaAresta('a39', 'O4', 'H13')
        self.composto_1_c8_bfs.adicionaAresta('a8', 'C10', 'H8')
        self.composto_1_c8_bfs.adicionaAresta('a26', 'C10', 'C13')
        self.composto_1_c8_bfs.adicionaAresta('a4', 'C11', 'H7')
        self.composto_1_c8_bfs.adicionaAresta('a15', 'C11', 'C12')
        self.composto_1_c8_bfs.adicionaAresta('a0', 'C1', 'H2')
        self.composto_1_c8_bfs.adicionaAresta('a6', 'C1', 'H3')
        self.composto_1_c8_bfs.adicionaAresta('a42', 'C1', 'H1')
        self.composto_1_c8_bfs.adicionaAresta('a9', 'C13', 'H12')
        self.composto_1_c8_bfs.adicionaAresta('a13', 'C13', 'C14')        
        self.composto_1_c8_bfs.adicionaAresta('a5', 'C12', 'H15')
        self.composto_1_c8_bfs.adicionaAresta('a25', 'C14', 'H16')

        self.m1_k_bfs = MeuGrafo(['K', 'G', 'J', 'A', 'I', 'H', 'B', 'F', 'C', 'D', 'E' ])
        self.m1_k_bfs.adicionaAresta("4", "K", "G")
        self.m1_k_bfs.adicionaAresta("5", "K", "J")
        self.m1_k_bfs.adicionaAresta("2", "G", "A")
        self.m1_k_bfs.adicionaAresta("8", "G", "I")
        self.m1_k_bfs.adicionaAresta("9", "G", "H")
        self.m1_k_bfs.adicionaAresta("12", "G", "B")
        self.m1_k_bfs.adicionaAresta("10", "H", "F")
        self.m1_k_bfs.adicionaAresta("13", "B", "C")
        self.m1_k_bfs.adicionaAresta("16", "B", "D")
        self.m1_k_bfs.adicionaAresta("17", "B", "E")

        self.m1_d_bfs = MeuGrafo(['D', 'C', 'E', 'B', 'A', 'F', 'G', 'J', 'H', 'K', 'I' ])
        self.m1_d_bfs.adicionaAresta("14", "D", "C")
        self.m1_d_bfs.adicionaAresta("15", "D", "E")
        self.m1_d_bfs.adicionaAresta("16", "D", "B")
        self.m1_d_bfs.adicionaAresta("1", "B", "A")
        self.m1_d_bfs.adicionaAresta("11", "B", "F")
        self.m1_d_bfs.adicionaAresta("12", "B", "G")
        self.m1_d_bfs.adicionaAresta("3", "A", "J")
        self.m1_d_bfs.adicionaAresta("10", "F", "H")
        self.m1_d_bfs.adicionaAresta("4", "G", "K")
        self.m1_d_bfs.adicionaAresta("8", "G", "I")

        self.social_media_dh_bfs = MeuGrafo([
            'DH', 'VINI', 'LUCAS', 'JV', 'LUIS', 'LUANA', 'ITALLO', 'LUIZA', 'INGRID', 'ANA', 'KAUE', 'GIO', 'MARQUES', 'DUDA', 
            'VANESSA', 'RAISSA', 'ELYZA', 'JAMYLE', 'JOSE', 'KAUA', 'NANI', 'PEDRO', 'RIAN', 'JOAO', 'RADIJA', 'YAN', 'CICERO', 
            'CAIO', 'ANTHONY', 'YURI', 'VITTOR', 'REBECA', 'JULIO', 'LOGAN', 'MATHEUS' 
        ])
        self.social_media_dh_bfs.adicionaAresta('a37', 'DH', 'VINI')
        self.social_media_dh_bfs.adicionaAresta('a31', 'VINI', 'LUCAS')
        self.social_media_dh_bfs.adicionaAresta('a33', 'VINI', 'JV')
        self.social_media_dh_bfs.adicionaAresta('a24', 'LUCAS', 'LUIS')
        self.social_media_dh_bfs.adicionaAresta('a26', 'LUCAS', 'LUANA')
        self.social_media_dh_bfs.adicionaAresta('a19', 'LUIS', 'ITALLO')
        self.social_media_dh_bfs.adicionaAresta('a20', 'LUIS', 'LUIZA')
        self.social_media_dh_bfs.adicionaAresta('a22', 'LUIS', 'INGRID')
        self.social_media_dh_bfs.adicionaAresta('a25', 'LUIS', 'ANA')
        self.social_media_dh_bfs.adicionaAresta('a8', 'ITALLO', 'KAUE')
        self.social_media_dh_bfs.adicionaAresta('a10', 'LUIZA', 'GIO')
        self.social_media_dh_bfs.adicionaAresta('a15', 'LUIZA', 'MARQUES')
        self.social_media_dh_bfs.adicionaAresta('a18', 'INGRID', 'DUDA')
        self.social_media_dh_bfs.adicionaAresta('a21', 'INGRID', 'VANESSA')
        self.social_media_dh_bfs.adicionaAresta('a23', 'INGRID', 'RAISSA')
        self.social_media_dh_bfs.adicionaAresta('a27', 'ANA', 'ELYZA')
        self.social_media_dh_bfs.adicionaAresta('a32', 'ANA', 'JAMYLE')
        self.social_media_dh_bfs.adicionaAresta('a3', 'KAUE', 'JOSE')
        self.social_media_dh_bfs.adicionaAresta('a4', 'KAUE', 'KAUA')
        self.social_media_dh_bfs.adicionaAresta('a5', 'KAUE', 'NANI')
        self.social_media_dh_bfs.adicionaAresta('a9', 'KAUE', 'PEDRO')
        self.social_media_dh_bfs.adicionaAresta('a6', 'GIO', 'RIAN')
        self.social_media_dh_bfs.adicionaAresta('a16', 'MARQUES', 'JOAO')
        self.social_media_dh_bfs.adicionaAresta('a28', 'ELYZA', 'RADIJA')
        self.social_media_dh_bfs.adicionaAresta('a34', 'JAMYLE', 'YAN')
        self.social_media_dh_bfs.adicionaAresta('a35', 'JAMYLE', 'CICERO')
        self.social_media_dh_bfs.adicionaAresta('a40', 'JAMYLE', 'CAIO')
        self.social_media_dh_bfs.adicionaAresta('a12', 'JOAO', 'ANTHONY')
        self.social_media_dh_bfs.adicionaAresta('a17', 'JOAO', 'YURI')
        self.social_media_dh_bfs.adicionaAresta('a38', 'YAN', 'VITTOR')
        self.social_media_dh_bfs.adicionaAresta('a36', 'CICERO', 'REBECA')
        self.social_media_dh_bfs.adicionaAresta('a7', 'ANTHONY', 'JULIO')
        self.social_media_dh_bfs.adicionaAresta('a42', 'VITTOR', 'LOGAN')
        self.social_media_dh_bfs.adicionaAresta('a41', 'REBECA', 'MATHEUS')

        self.social_media_jamyle_bfs = MeuGrafo([
            'JAMYLE', 'ANA', 'YAN', 'CICERO', 'CAIO', 'LUIS', 'ELYZA', 'VITTOR', 'RADIJA', 'REBECA', 'ITALLO', 'LUIZA', 
            'INGRID', 'LUCAS', 'LOGAN', 'MATHEUS', 'KAUE', 'GIO', 'MARQUES', 'DUDA', 'VANESSA', 'RAISSA', 'LUANA', 'JV', 
            'VINI', 'JOSE', 'KAUA', 'NANI', 'PEDRO', 'RIAN', 'JOAO', 'DH', 'ANTHONY', 'YURI', 'JULIO' 
        ])
        self.social_media_jamyle_bfs.adicionaAresta('a32', 'JAMYLE', 'ANA')
        self.social_media_jamyle_bfs.adicionaAresta('a34', 'JAMYLE', 'YAN')
        self.social_media_jamyle_bfs.adicionaAresta('a35', 'JAMYLE', 'CICERO')
        self.social_media_jamyle_bfs.adicionaAresta('a40', 'JAMYLE', 'CAIO')
        self.social_media_jamyle_bfs.adicionaAresta('a25', 'ANA', 'LUIS')
        self.social_media_jamyle_bfs.adicionaAresta('a27', 'ANA', 'ELYZA')
        self.social_media_jamyle_bfs.adicionaAresta('a38', 'YAN', 'VITTOR')
        self.social_media_jamyle_bfs.adicionaAresta('a29', 'CICERO', 'RADIJA')
        self.social_media_jamyle_bfs.adicionaAresta('a36', 'CICERO', 'REBECA')
        self.social_media_jamyle_bfs.adicionaAresta('a19', 'LUIS', 'ITALLO')
        self.social_media_jamyle_bfs.adicionaAresta('a20', 'LUIS', 'LUIZA')
        self.social_media_jamyle_bfs.adicionaAresta('a22', 'LUIS', 'INGRID')
        self.social_media_jamyle_bfs.adicionaAresta('a24', 'LUIS', 'LUCAS')
        self.social_media_jamyle_bfs.adicionaAresta('a42', 'VITTOR', 'LOGAN')
        self.social_media_jamyle_bfs.adicionaAresta('a41', 'REBECA', 'MATHEUS')
        self.social_media_jamyle_bfs.adicionaAresta('a8', 'ITALLO', 'KAUE')
        self.social_media_jamyle_bfs.adicionaAresta('a10', 'LUIZA', 'GIO')
        self.social_media_jamyle_bfs.adicionaAresta('a15', 'LUIZA', 'MARQUES')
        self.social_media_jamyle_bfs.adicionaAresta('a18', 'INGRID', 'DUDA')
        self.social_media_jamyle_bfs.adicionaAresta('a21', 'INGRID', 'VANESSA')
        self.social_media_jamyle_bfs.adicionaAresta('a23', 'INGRID', 'RAISSA')
        self.social_media_jamyle_bfs.adicionaAresta('a26', 'LUCAS', 'LUANA')
        self.social_media_jamyle_bfs.adicionaAresta('a30', 'LUCAS', 'JV')
        self.social_media_jamyle_bfs.adicionaAresta('a31', 'LUCAS', 'VINI')
        self.social_media_jamyle_bfs.adicionaAresta('a3', 'KAUE', 'JOSE')
        self.social_media_jamyle_bfs.adicionaAresta('a4', 'KAUE', 'KAUA')
        self.social_media_jamyle_bfs.adicionaAresta('a5', 'KAUE', 'NANI')
        self.social_media_jamyle_bfs.adicionaAresta('a9', 'KAUE', 'PEDRO')
        self.social_media_jamyle_bfs.adicionaAresta('a6', 'GIO', 'RIAN')
        self.social_media_jamyle_bfs.adicionaAresta('a16', 'MARQUES', 'JOAO')
        self.social_media_jamyle_bfs.adicionaAresta('a37', 'VINI', 'DH')
        self.social_media_jamyle_bfs.adicionaAresta('a12', 'JOAO', 'ANTHONY')
        self.social_media_jamyle_bfs.adicionaAresta('a17', 'JOAO', 'YURI')
        self.social_media_jamyle_bfs.adicionaAresta('a7', 'ANTHONY', 'JULIO')

        self.composto_2__h4_bfs = MeuGrafo(['H4', 'C2', 'C1', 'C3', 'H5', 'H1', 'H3', 'H2', 'C4', 'H7', 'H6', 'O1', 'N1', 'H8', 'H9'])
        self.composto_2__h4_bfs.adicionaAresta('l', 'H4', 'C2')
        self.composto_2__h4_bfs.adicionaAresta('b', 'C2', 'C1')
        self.composto_2__h4_bfs.adicionaAresta('c', 'C2', 'C3')
        self.composto_2__h4_bfs.adicionaAresta('m', 'C2', 'H5')
        self.composto_2__h4_bfs.adicionaAresta('a', 'C1', 'H1')
        self.composto_2__h4_bfs.adicionaAresta('o', 'C1', 'H3')
        self.composto_2__h4_bfs.adicionaAresta('p', 'C1', 'H2')
        self.composto_2__h4_bfs.adicionaAresta('d', 'C3', 'C4')
        self.composto_2__h4_bfs.adicionaAresta('j', 'C3', 'H7')
        self.composto_2__h4_bfs.adicionaAresta('k', 'C3', 'H6')
        self.composto_2__h4_bfs.adicionaAresta('e', 'C4', 'O1')
        self.composto_2__h4_bfs.adicionaAresta('f', 'C4', 'N1')
        self.composto_2__h4_bfs.adicionaAresta('g', 'N1', 'H8')
        self.composto_2__h4_bfs.adicionaAresta('h', 'N1', 'H9')

    def test_adiciona_aresta(self):
        self.assertTrue(self.g_p.adicionaAresta('a10', 'J', 'C'))
        with self.assertRaises(ArestaInvalidaException):
            self.assertTrue(self.g_p.adicionaAresta('b1', '', 'C'))
        with self.assertRaises(ArestaInvalidaException):
            self.assertTrue(self.g_p.adicionaAresta('b1', 'A', 'C'))
        with self.assertRaises(ArestaInvalidaException):
            self.g_p.adicionaAresta('')
        with self.assertRaises(ArestaInvalidaException):
            self.g_p.adicionaAresta('aa-bb')
        with self.assertRaises(ArestaInvalidaException):
            self.g_p.adicionaAresta('x', 'J', 'V')
        with self.assertRaises(ArestaInvalidaException):
            self.g_p.adicionaAresta('a1', 'J', 'C')

    def test_vertices_nao_adjacentes(self):
        self.assertEqual(self.g_p.vertices_nao_adjacentes(), ['J-E', 'J-P', 'J-M', 'J-T', 'J-Z', 'C-Z', 'E-P', 'E-M', 'E-T', 'E-Z', 'P-M', 'P-T', 'P-Z', 'M-Z'])
        self.assertEqual(self.g_c.vertices_nao_adjacentes(), [])
        self.assertEqual(self.g_c3.vertices_nao_adjacentes(), [])
        self.assertEqual(self.g_c4.vertices_nao_adjacentes(), [])
        self.assertEqual(self.weird_graph.vertices_nao_adjacentes(), ['J-P', 'J-M', 'C-E', 'C-M', 'E-P'])
        self.assertAlmostEquals(self.spire_graph.vertices_nao_adjacentes(), ['0-4', '2-4'])

    def test_ha_laco(self):
        self.assertFalse(self.g_p.ha_laco())
        self.assertFalse(self.g_p_sem_paralelas.ha_laco())
        self.assertFalse(self.g_c2.ha_laco())
        self.assertFalse(self.g_c4.ha_laco())
        self.assertTrue(self.g_l1.ha_laco())
        self.assertTrue(self.g_l2.ha_laco())
        self.assertTrue(self.g_l3.ha_laco())
        self.assertTrue(self.g_l4.ha_laco())
        self.assertTrue(self.g_l5.ha_laco())
        self.assertTrue(self.weird_graph.ha_laco())
        self.assertTrue(self.spire_graph.ha_laco())

    def test_grau(self):
        # Paraíba
        self.assertEqual(self.g_p.grau('J'), 1)
        self.assertEqual(self.g_p.grau('C'), 7)
        self.assertEqual(self.g_p.grau('E'), 2)
        self.assertEqual(self.g_p.grau('P'), 2)
        self.assertEqual(self.g_p.grau('M'), 2)
        self.assertEqual(self.g_p.grau('T'), 3)
        self.assertEqual(self.g_p.grau('Z'), 1)
        with self.assertRaises(VerticeInvalidoException):
            self.assertEqual(self.g_p.grau('G'), 5)

        self.assertEqual(self.g_d.grau('A'), 1)
        self.assertEqual(self.g_d.grau('C'), 0)
        self.assertNotEqual(self.g_d.grau('D'), 2)

        # Completos
        self.assertEqual(self.g_c.grau('J'), 3)
        self.assertEqual(self.g_c.grau('C'), 3)
        self.assertEqual(self.g_c.grau('E'), 3)
        self.assertEqual(self.g_c.grau('P'), 3)

        self.assertEqual(self.g_c4.grau('J'), 4)
        self.assertEqual(self.g_c4.grau('C'), 4)
        self.assertEqual(self.g_c4.grau('E'), 4)
        self.assertEqual(self.g_c4.grau('P'), 4)
        self.assertEqual(self.g_c4.grau('M'), 4)

        # Com laço. Lembrando que cada laço conta 2 vezes por vértice para cálculo do grau
        self.assertEqual(self.g_l1.grau('A'), 5)
        self.assertEqual(self.g_l2.grau('B'), 4)
        self.assertEqual(self.g_l4.grau('D'), 2)
        self.assertEqual(self.weird_graph.grau('J'), 4)

        self.assertEqual(self.spire_graph.grau('0'), 4)
        self.assertEqual(self.spire_graph.grau('2'), 3)
        self.assertEqual(self.spire_graph.grau('4'), 1)
        self.assertEqual(self.spire_graph.grau('6'), 4)

    def test_ha_paralelas(self):
        self.assertTrue(self.g_p.ha_paralelas())
        self.assertFalse(self.g_p_sem_paralelas.ha_paralelas())
        self.assertFalse(self.g_c.ha_paralelas())
        self.assertFalse(self.g_c2.ha_paralelas())
        self.assertFalse(self.g_c3.ha_paralelas())
        self.assertTrue(self.g_l1.ha_paralelas())
        self.assertFalse(self.weird_graph.ha_paralelas())
        self.assertTrue(self.spire_graph.ha_paralelas())

    def test_arestas_sobre_vertice(self):
        self.assertEqual(self.g_p.arestas_sobre_vertice("J"), ['a1'])
        self.assertEqual(set(self.g_p.arestas_sobre_vertice('C')), set(['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7']))
        self.assertEqual(set(self.g_p.arestas_sobre_vertice('M')), set(['a6', 'a8']))
        self.assertEqual(set(self.g_l2.arestas_sobre_vertice('B')), set(['a1', 'a2', 'a3']))
        self.assertEqual(set(self.g_d.arestas_sobre_vertice('C')), set())
        self.assertEqual(set(self.g_d.arestas_sobre_vertice('A')), set(['asd']))
        with self.assertRaises(VerticeInvalidoException):
            self.g_p.arestas_sobre_vertice('A')

    def test_eh_completo(self):
        self.assertFalse(self.g_p.eh_completo())
        self.assertFalse((self.g_p_sem_paralelas.eh_completo()))
        self.assertTrue((self.g_c.eh_completo()))
        self.assertTrue((self.g_c2.eh_completo()))
        self.assertTrue((self.g_c3.eh_completo()))
        self.assertTrue((self.g_c4.eh_completo()))
        self.assertFalse((self.g_l1.eh_completo()))
        self.assertFalse((self.g_l2.eh_completo()))
        self.assertFalse((self.g_l3.eh_completo()))
        self.assertFalse((self.g_l4.eh_completo()))
        self.assertFalse((self.g_l5.eh_completo()))
        self.assertFalse((self.weird_graph.eh_completo()))
        self.assertFalse((self.spire_graph.eh_completo()))

    def test_dfs(self):
        self.assertEqual(self.g_p.DFS("J"), self.g_p_j_dfs)
        self.assertEqual(self.g_p.DFS("C"), self.g_p_c_dfs)
        self.assertEqual(self.g_p.DFS("P"), self.g_p_p_dfs)
        self.assertEqual(self.alcano.DFS("C0"), self.alcano_c0_dfs)
        self.assertEqual(self.u.DFS("1"), self.u_1_dfs)
        self.assertEqual(self.g_c3.DFS("J"), self.g_c3_none_dfs)
        self.assertEqual(self.g_c.DFS("J"), self.g_c_j_dfs)
        self.assertEqual(self.spire_graph2.DFS("6"), self.spire_graph2_6_dfs)
        self.assertEqual(self.composto_1.DFS('C8'), self.composto_1_c8_dfs)
        self.assertEqual(self.m1.DFS("K"), self.m1_k_dfs)
        self.assertEqual(self.m1.DFS("D"), self.m1_d_dfs)
        self.assertEqual(self.social_media.DFS('JAMYLE'), self.social_media_jamyle_dfs)
        self.assertEqual(self.social_media.DFS("DH"), self.social_media_dh_dfs)
        self.assertEqual(self.composto_2.DFS('H4'), self.composto_2__h4_dfs)

    def test_bfs(self):
        self.assertEqual(self.g_p.BFS('J'), self.g_p_j_bfs)
        self.assertEqual(self.g_p.BFS('C'), self.g_p_c_bfs)
        self.assertEqual(self.g_p.BFS('P'), self.g_p_p_bfs)
        self.assertEqual(self.alcano.BFS('C0'), self.alcano_c0_bfs)
        self.assertEqual(self.u.BFS('1'), self.u_1_bfs)
        self.assertEqual(self.g_c3.BFS('J'), self.g_c3_none_bfs)
        self.assertEqual(self.g_c.BFS('J'), self.g_c_j_bfs)
        self.assertEqual(self.spire_graph2.BFS('6'), self.spire_graph2_6_bfs)
        self.assertEqual(self.composto_1.BFS('C8'), self.composto_1_c8_bfs)
        self.assertEqual(self.m1.BFS('K'), self.m1_k_bfs)
        self.assertEqual(self.m1.BFS('D'), self.m1_d_bfs)
        self.assertEqual(self.social_media.BFS('DH'), self.social_media_dh_bfs)
        self.assertEqual(self.social_media.BFS('JAMYLE'), self.social_media_jamyle_bfs)
        self.assertEqual(self.composto_2.BFS('H4'), self.composto_2__h4_bfs)

    def test_ha_ciclo(self):
        self.assertEqual(self.g_p.ha_ciclo(), ['E', 'a2', 'C', 'a3', 'E'])
        self.assertEqual(self.m1.ha_ciclo(), ['A', '2', 'G', '9', 'H', '10', 'F', '11', 'B', '1', 'A'])
        self.assertEqual(self.abc.ha_ciclo(), ['A', 'a3', 'C', 'a2', 'B', 'a1', 'A'])
        self.assertEqual(self.m2.ha_ciclo(), ['3', 'a3', '2', 'a4', '3'])
        self.assertEqual(self.composto_1.ha_ciclo(), ['O5', 'a1', 'C2', 'a2', 'O5'])
        self.assertEqual(self.composto_2.ha_ciclo(), ['O1', 'e', 'C4', 'i', 'O1'])
        self.assertEqual(self.social_media.ha_ciclo(), ['KAUE', 'a5', 'NANI', 'a2', 'KAUA', 'a1', 'JOSE', 'a3', 'KAUE'])
        self.assertEqual(self.g_c4.ha_ciclo(), ['J', 'b', 'E', 'd', 'C', 'a', 'J'])
        self.assertEqual(self.u.ha_ciclo(), False)
        self.assertEqual(self.arvore_1.ha_ciclo(), False)
        self.assertEqual(self.arvore_diretorios.ha_ciclo(), False)
        self.assertEqual(self.arvore_2.ha_ciclo(), False)
        self.assertEqual(self.spire_graph2.ha_ciclo(), ['0', 'b', '2', 'c', '6', 'f', '4', 'a', '0'])
        self.assertEqual(self.m3.ha_ciclo(), ['1', 'a6', '2', 'a7', '5', 'a2', '4', 'a1', '1'])

    def test_caminho(self):
        self.assertEqual(self.g_p.caminho(2), ['J', 'a1', 'C', 'a2', 'E'])
        self.assertEqual(self.g_p.caminho(3), ['J', 'a1', 'C', 'a7', 'T', 'a8', 'M'])
        self.assertEqual(self.g_p.caminho(4), ['J', 'a1', 'C', 'a6', 'M', 'a8', 'T', 'a9', 'Z'])
        self.assertEqual(self.g_p.caminho(5), False)
        self.assertEqual(self.m1.caminho(6), ['A', '3', 'J', '5', 'K', '4', 'G', '9', 'H', '10', 'F', '11', 'B'])
        self.assertEqual(self.m1.caminho(7), ['A', '2', 'G', '9', 'H', '10', 'F', '11', 'B', '17', 'E', '15', 'D', '14', 'C'])
        self.assertEqual(self.m1.caminho(8), ['A', '3', 'J', '5', 'K', '4', 'G', '9', 'H', '10', 'F', '11', 'B', '16', 'D', '14', 'C'])
        self.assertEqual(self.m1.caminho(9), ['A', '3', 'J', '5', 'K', '4', 'G', '9', 'H', '10', 'F', '11', 'B', '17', 'E', '15', 'D', '14', 'C'])
        self.assertEqual(self.m1.caminho(10), False)
        self.assertEqual(self.abc.caminho(2), ['A', 'a3', 'C', 'a2', 'B'])
        self.assertEqual(self.abc.caminho(3), False)
        self.assertEqual(self.abc.caminho(3), False)
        self.assertEqual(self.composto_1.caminho(6), ['C1', 'a24', 'O1', 'a22', 'C2', 'a21', 'C3', 'a7', 'N1', 'a23', 'C8', 'a27', 'C6'])
        self.assertEqual(self.composto_1.caminho(7), ['C1', 'a24', 'O1', 'a22', 'C2', 'a21', 'C3', 'a7', 'N1', 'a23', 'C8', 'a27', 'C6', 'a29', 'C5'])
        self.assertEqual(self.composto_1.caminho(8), ['C1', 'a24', 'O1', 'a22', 'C2', 'a21', 'C3', 'a7', 'N1', 'a23', 'C8', 'a27', 'C6', 'a29', 'C5', 'a31', 'C4'])
        self.assertEqual(self.composto_1.caminho(9), ['C1', 'a24', 'O1', 'a22', 'C2', 'a21', 'C3', 'a10', 'C7', 'a19', 'C9', 'a11', 'C10', 'a26', 'C13', 'a13', 'C14', 'a17', 'C12'])
        self.assertEqual(self.composto_1.caminho(10), ['C1', 'a24', 'O1', 'a22', 'C2', 'a21', 'C3', 'a10', 'C7', 'a19', 'C9', 'a14', 'C11', 'a15', 'C12', 'a17', 'C14', 'a13', 'C13', 'a26', 'C10'])
        self.assertEqual(self.composto_1.caminho(11), ['C1', 'a24', 'O1', 'a22', 'C2', 'a21', 'C3', 'a10', 'C7', 'a19', 'C9', 'a11', 'C10', 'a26', 'C13', 'a13', 'C14', 'a17', 'C12', 'a15', 'C11', 'a4', 'H7'])
        self.assertEqual(self.composto_1.caminho(12), ['C4', 'a31', 'C5', 'a29', 'C6', 'a27', 'C8', 'a23', 'N1', 'a7', 'C3', 'a10', 'C7', 'a19', 'C9', 'a14', 'C11', 'a15', 'C12', 'a17', 'C14', 'a13', 'C13', 'a26', 'C10'])
        self.assertEqual(self.composto_1.caminho(13), ['C4', 'a31', 'C5', 'a29', 'C6', 'a27', 'C8', 'a23', 'N1', 'a7', 'C3', 'a10', 'C7', 'a19', 'C9', 'a11', 'C10', 'a26', 'C13', 'a13', 'C14', 'a17', 'C12', 'a15', 'C11', 'a4', 'H7'])
        self.assertEqual(self.composto_1.caminho(14), ['C10', 'a26', 'C13', 'a13', 'C14', 'a17', 'C12', 'a15', 'C11', 'a14', 'C9', 'a19', 'C7', 'a10', 'C3', 'a7', 'N1', 'a23', 'C8', 'a27', 'C6', 'a29', 'C5', 'a31', 'C4', 'a38', 'O4', 'a39', 'H13'])
        self.assertEqual(self.composto_1.caminho(15), ['H7', 'a4', 'C11', 'a15', 'C12', 'a17', 'C14', 'a13', 'C13', 'a26', 'C10', 'a11', 'C9', 'a19', 'C7', 'a10', 'C3', 'a7', 'N1', 'a23', 'C8', 'a27', 'C6', 'a29', 'C5', 'a31', 'C4', 'a38', 'O4', 'a39', 'H13'])
        self.assertEqual(self.composto_1.caminho(16), False)
        self.assertEqual(self.social_media.caminho(17), ['LOGAN', 'a42', 'VITTOR', 'a38', 'YAN', 'a39', 'CAIO', 'a40', 'JAMYLE', 'a35', 'CICERO', 'a29', 'RADIJA', 'a28', 'ELYZA', 'a27', 'ANA', 'a25', 'LUIS', 'a19', 'ITALLO', 'a14', 'LUIZA', 'a10', 'GIO', 'a11', 'MARQUES', 'a16', 'JOAO', 'a17', 'YURI', 'a13', 'ANTHONY', 'a7', 'JULIO'])
        self.assertEqual(self.social_media.caminho(18), False)

    def test_conexo(self):
        self.assertEqual(self.g_p.conexo(), True)
        self.assertEqual(self.m1.conexo(), True)
        self.assertEqual(self.g_c4.conexo(), True)
        self.assertEqual(self.social_media.conexo(), True)
        self.assertEqual(self.composto_1.conexo(), True)
        self.assertEqual(self.g_d.conexo(), False)
        self.assertEqual(self.g_d1.conexo(), False)
        self.assertEqual(self.g_d2.conexo(), False)
        self.assertEqual(self.g_d3.conexo(), False)
        self.assertEqual(self.g_d4.conexo(), False)
        self.assertEqual(self.spire_graph.conexo(), True)
        self.assertEqual(self.g_d5.conexo(), False)

    def test_caminho_euleriano(self):
        self.assertEqual(self.g_p.euler_path_circuit(), False)
        self.assertEqual(self.social_media.euler_path_circuit(), False)
        self.assertEqual(self.composto_1.euler_path_circuit(), False)
        self.assertEqual(self.g_c4.euler_path_circuit(), ['C', 'a', 'J', 'g', 'M', 'k', 'P', 'c', 'J', 'b', 'E', 'i', 'M', 'h', 'C', 'e', 'P', 'f', 'E', 'd', 'C'])
        self.assertEqual(self.m4.euler_path_circuit(), ['F', 'a4', 'A', 'a1', 'B', 'a7', 'G', 'a9', 'F', 'a8', 'E', 'a6', 'B', 'a5', 'C', 'a2', 'A', 'a3', 'D'])
        self.assertEqual(self.m1.euler_path_circuit(), ['D', '14', 'C', '13', 'B', '1', 'A', '3', 'J', '7', 'I', '8', 'G', '4', 'K', '5', 'J', '6', 'G', '9', 'H', '10', 'F', '11', 'B', '16', 'D', '15', 'E', '17', 'B', '12', 'G', '2', 'A'])
        self.assertEqual(self.m5.euler_path_circuit(), ['2', 'a3', '3', 'a7', '4', 'a4', '2', 'a6', '6', 'a14', '7', 'a15', '10', 'a16', '9', 'a9', '4', 'a8', '5', 'a1', '1', 'a2', '8', 'a12', '5', 'a11', '6', 'a13', '9', 'a10', '5', 'a5', '2'])
        self.assertEqual(self.abc.euler_path_circuit(), ['B', 'a1', 'A', 'a3', 'C', 'a2', 'B'])
        self.assertEqual(self.g_d1.euler_path_circuit(), False)
        self.assertEqual(self.spire_graph.euler_path_circuit(), ['4', 'f', '6', 'c', '2', 'b', '0', 'a', '0', 'd', '6', 'e', '2'])
        self.assertEqual(self.spire_graph2.euler_path_circuit(), ['2', 'b', '0', 'a', '4', 'f', '6', 'c', '2', 'e', '6', 'd', '0'])
        self.assertEqual(self.m6.euler_path_circuit(), ['B', '1', 'A', '2', 'F', '12', 'B', '6', 'C', '11', 'D', '10', 'E', '3', 'F', '4', 'G', '8', 'E', '9', 'C', '7', 'G', '5', 'B'])
        self.assertEqual(self.composto_2.euler_path_circuit(), False)
        self.assertEqual(self.m2.euler_path_circuit(), False)
        self.assertEqual(self.g_l4.euler_path_circuit(), ['D', 'a1', 'D'])